@page "/"
@inject ILogger<Index> Logger
@inject IConfiguration Configuration

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (pageApproved)
{
    <h2 class="text-success">This page has been approved.</h2>
}

@if (pageRejected)
{
    <h2 class="text-danger">This page has been rejected.</h2>
}

<SurveyPrompt Title="How is Blazor working for you?" />

<br />

<div class="row">
    <div class="col-md-6">
        <table class="table table-striped">
            <thead class="table-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">First</th>
                <th scope="col">Last</th>
                <th scope="col">Handle</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <th scope="row">1</th>
                <td>Mark</td>
                <td>Otto</td>
                <td>@@mdo</td>
            </tr>
            <tr>
                <th scope="row">2</th>
                <td>Jacob</td>
                <td>Thornton</td>
                <td>@@fat</td>
            </tr>
            <tr>
                <th scope="row">3</th>
                <td colspan="2">Larry the Bird</td>
                <td>@@twitter</td>
            </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-6">
        <img class="img-fluid"
             src="images/DinosOnBeach.jpg"
             alt="">
    </div>
</div>

@if (! pageApproved && ! pageRejected)
{
    <div class="row">
        <div class="col-12">
            <Vote OnVoted="HandleOnVoted"></Vote>
        </div>
    </div>
}

@code
{

    private bool pageApproved;

    private bool pageRejected;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

    // Given some data...
        int id = Configuration.GetValue<int>("WeatherForecast:ForecastDays");

    // Log it using Structured Logging...
        Logger.LogInformation("User created with id {UserId}", id); // The name used in the curly braces does not need to match the variable name. It's purely positional. 

    // Log the same data twice in one message...
        Logger.LogInformation("User created with id {UserId} (repeat: id {Id})", id, id); // The value name in the curly braces should have to be different, but the same variable is passed in twice.
    }

    private void HandleOnVoted(string result)
    {
        switch (result)
        {
            case "Approved":
                pageApproved = true;
                break;
            case "Rejected":
                pageRejected = true;
                break;
        }
    }
}
